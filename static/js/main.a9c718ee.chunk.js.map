{"version":3,"sources":["components/QuoteBox.js","services/RandomQuoteService.js","App.js","serviceWorker.js","index.js"],"names":["QuoteBox","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","quote","text","author","getNewRandomQuote","bind","assertThisInitialized","Math","floor","random","setState","quoteText","encodeURIComponent","concat","twitterLink","react_default","a","createElement","id","className","onClick","target","rel","href","Component","App","QuoteBox_QuoteBox","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kPAMqBA,cAEjB,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAEKI,MAAQ,CACTC,MAAO,CACHC,KAAM,iCACNC,OAAQ,sBAIhBV,EAAKW,kBAAoBX,EAAKW,kBAAkBC,KAAvBX,OAAAY,EAAA,EAAAZ,CAAAD,IAVfA,mFAcV,IAAIQ,ECnBO,CACX,CACIE,OAAQ,eACRD,KAAM,4BAEV,CACIC,OAAQ,iBACRD,KAAM,gEAEV,CACIC,OAAQ,gBACRD,KAAM,mCAEV,CACIC,OAAQ,gBACRD,KAAM,sCAEV,CACIC,OAAQ,MACRD,KAAM,kDAEV,CACIC,OAAQ,iBACRD,KAAM,iFAEV,CACIC,OAAQ,iBACRD,KAAM,oDAEV,CACIC,OAAQ,cACRD,KAAM,iIAEV,CACIC,OAAQ,iBACRD,KAAM,wPAEV,CACIC,OAAQ,cACRD,KAAM,0FAIAK,KAAKC,MAAsB,GAAhBD,KAAKE,WDvB1Bb,KAAKc,SAAS,CACVT,MAAO,CACHC,KAAMD,EAAMC,KACZC,OAAQF,EAAME,2CAQtB,IAAMQ,EAAYC,mBAAkB,IAAAC,OAAKjB,KAAKI,MAAMC,MAAMC,KAAtB,UAAAW,OAAmCjB,KAAKI,MAAMC,MAAME,SAClFW,EAAW,0CAAAD,OAA6CF,EAA7C,6CAEjB,OACII,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,cAAYC,GAAG,YAAYC,UAAU,yBACjCJ,EAAAC,EAAAC,cAAA,KAAGC,GAAG,OAAOC,UAAU,cAClBvB,KAAKI,MAAMC,MAAMC,MAEtBa,EAAAC,EAAAC,cAAA,KAAGC,GAAG,SAASC,UAAU,gBACpBvB,KAAKI,MAAMC,MAAME,QAEtBY,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACXJ,EAAAC,EAAAC,cAAA,OAAKC,GAAG,YAAYC,UAAU,gCAAgCC,QAASxB,KAAKQ,mBAA5E,aAGAW,EAAAC,EAAAC,cAAA,KAAGC,GAAG,cAAcC,UAAU,6BAA6BE,OAAO,SAASC,IAAI,sBAAsBC,KAAMT,GAA3G,mBA5CcU,aEQvBC,mLARX,OACEV,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACS,EAAD,cAJUF,aCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a9c718ee.chunk.js","sourcesContent":["// This component represents the Box containing the random quotes.\n// New Quote will be fetched via the RandomQuoteService\n\nimport React, { Component } from 'react';\nimport { getQuote } from '../services/RandomQuoteService';\n\nexport default class QuoteBox extends Component {\n\n    constructor() {\n        super();\n\n        this.state = {\n            quote: {\n                text: 'This is a random quote machine',\n                author: 'Michael Br√ºnen'\n            }\n        }\n\n        this.getNewRandomQuote = this.getNewRandomQuote.bind(this);\n    }\n\n    getNewRandomQuote() {\n        let quote = getQuote();\n        this.setState({\n            quote: {\n                text: quote.text,\n                author: quote.author\n            }\n        });\n    }\n\n\n    render() {\n        // prepare quote and twitter link\n        const quoteText = encodeURIComponent(`\"${this.state.quote.text}\"\\n - ${this.state.quote.author}`);\n        const twitterLink = `https://twitter.com/intent/tweet/?text=${quoteText}&hashtags=FreeCodeCamp,RandomQuoteMachine`;\n\n        return (\n            <div>\n                <blockquote id=\"quote-box\" className=\"quote-box text-center\">\n                    <p id=\"text\" className=\"quote-text\">\n                        {this.state.quote.text}\n                    </p>\n                    <p id=\"author\" className=\"quote-author\">\n                        {this.state.quote.author}\n                    </p>\n                    <div className=\"buttons\">\n                        <div id=\"new-quote\" className=\"btn btn-secondary float-right\" onClick={this.getNewRandomQuote}>\n                            New Quote\n                        </div>\n                        <a id=\"tweet-quote\" className=\"btn btn-primary float-left\" target=\"_blank\" rel=\"noopener noreferrer\" href={twitterLink}>\n                            Tweet\n                        </a>\n                    </div>\n                </blockquote>\n            </div>\n        );\n    }\n}","export function getQuote() {\n    // I tried to find an api for this, but couldn't find a reliable, free api that allowed for easy access, \n    // so here's an array of quote, which will always work and doesn't cost me anything\n    const quotes = [\n        {\n            author: \"Ellen Lupton\",\n            text: \"Think more, design less.\"\n        },\n        {\n            author: \"Victor Papanek\",\n            text: \"Design is the conscious effort to impose a meaningful order.\"\n        },\n        {\n            author: \"Karen McGrane\",\n            text: \"Give a crap. Don't give a fuck.\"\n        },\n        {\n            author: \"Yasin Japardi\",\n            text: \"There's no shortcut for greatness.\"\n        },\n        {\n            author: \"GZA\",\n            text: \"Where I come from, gettin' visual is habitual.\"\n        },\n        {\n            author: \"Bill Watterson\",\n            text: \"You mix a bunch of ingredients, and once in a great while, chemistry happens.\"\n        },\n        {\n            author: \"Vital Lokossou\",\n            text: \"Tech without design is the business's perdition.\"\n        },\n        {\n            author: \"Alan Cooper\",\n            text: \"If we want users to like our software we should design it to behave like a likeable person: respectful, generous and helpful.\"\n        },\n        {\n            author: \"Marcel Wanders\",\n            text: \"Functionality is so over-valued in design, and we've kept design very small in that way. Functionality is the sheer minimum. If your house burns down, what do you take? The cat in the window that you got from your mother, or the chair you have?\"\n        },\n        {\n            author: \"Lisa Manson\",\n            text: \"A graphic designer is a machine that turns coffee into beautiful, functional imagery.\"\n        }\n    ]\n\n    return quotes[Math.floor(Math.random() * 10)];\n}","import React, {Component} from 'react';\nimport './App.css';\nimport QuoteBox from './components/QuoteBox';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <QuoteBox/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}